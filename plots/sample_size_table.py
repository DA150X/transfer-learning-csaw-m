import sys
import numpy as np
from beeprint import pp
from pathlib import Path
from decimal import Decimal
from common import (
    get_argument_parser,
    ensure_outputdir_and_write_chart,
    get_test_results_for_label_network_scale_factor_and_sample_size,
    get_labels,
    get_sample_sizes,
    get_networks,
    get_scale_factors,
)


def main():
    parser = get_argument_parser('sample_size_table')
    args = parser.parse_args(sys.argv[1:])

    output_filename = f'{args.path_to_output}/table-8.tex'
    if Path(output_filename).exists():
        Path(output_filename).unlink()

    with open(output_filename, 'w') as out:
        out.write('% this table is autogenerated \n')

    create_chart_for_metric('auc', args)


def create_chart_for_metric(metric, args):
    output_filename = f'{args.path_to_output}/table-8.tex'
    sample_sizes = get_sample_sizes(args.path_to_csv, metric)
    networks = get_networks(args.path_to_csv, metric)
    scale_factors = get_scale_factors(args.path_to_csv, metric)
    labels = get_labels(args.path_to_csv, metric)

    for label in labels:
        safe_label = label.replace('_', '\_')
        with open(output_filename, 'a') as out:
            out.write(f'\\begin{{table}}[h!]\n')
            out.write(f'\\begin{{center}}\n')
            out.write(f'\\caption{{AUC Performance table for the \\textbf{{\\textit{{{safe_label}}}}} label.}}\n')
            out.write(f'\\label{{tab:table1}}\n')
            out.write(f'\\begin{{tabular}}{{l|c|c|c|c|c|c|c}}\n')
            out.write(f'& \\textbf{{100}} & \\textbf{{500}} & \\textbf{{1000}} & \\textbf{{3000}} & \\textbf{{5000}} & \\textbf{{7000}} & \\textbf{{9523}}\\\\\n')
            out.write(f'\\hline\n')
            out.write(f'\\hline\n')
            out.write(f'\\noalign{{\\vskip 3pt}}\n')

        for network in networks:
            for scale_factor in scale_factors:
                with open(output_filename, 'a') as out:
                    out.write(f'\\tt{{{network} {scale_factor}x}} ')

                for sample_size in sample_sizes:
                    value = get_test_results_for_label_network_scale_factor_and_sample_size(
                        args.path_to_csv,
                        metric,
                        label,
                        network,
                        scale_factor,
                        sample_size
                    )
                    after = value['after']
                    if after is None:
                        with open(output_filename, 'a') as out:
                            out.write('& - ')
                        continue
                    with open(output_filename, 'a') as out:
                        out.write(f'& {round(after, 2)}')

                with open(output_filename, 'a') as out:
                    out.write(f'\\\\\n')

            with open(output_filename, 'a') as out:
                out.write(f'\\noalign{{\\vskip 6pt}}\n')
                out.write(f'\\hline\n')
                out.write(f'\\noalign{{\\vskip 12pt}}\n')

        with open(output_filename, 'a') as out:
            out.write(f'\\end{{tabular}}\n')
            out.write(f'\\end{{center}}\n')
            out.write(f'\\end{{table}}\n')
            out.write('\n')
            out.write('\n')


if __name__ == '__main__':
    main()

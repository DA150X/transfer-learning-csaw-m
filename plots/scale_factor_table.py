import sys
import numpy as np
from beeprint import pp
from pathlib import Path
from decimal import Decimal
from common import (
    get_argument_parser,
    ensure_outputdir_and_write_chart,
    get_test_results_for_label_network_scale_factor_and_sample_size,
    get_labels,
    get_sample_sizes,
    get_networks,
    get_scale_factors,
)


def main():
    parser = get_argument_parser('scale_factor_table')
    args = parser.parse_args(sys.argv[1:])

    output_filename = f'{args.path_to_output}/table-6.tex'
    if Path(output_filename).exists():
        Path(output_filename).unlink()

    with open(output_filename, 'w') as out:
        out.write('% this table is autogenerated \n')

    create_chart_for_metric('auc', args)


def create_chart_for_metric(metric, args):
    output_filename = f'{args.path_to_output}/table-6.tex'
    sample_sizes = get_sample_sizes(args.path_to_csv, metric)
    networks = get_networks(args.path_to_csv, metric)
    scale_factors = get_scale_factors(args.path_to_csv, metric)
    label = 'If_cancer'

    for network in networks:
        safe_label = label.replace('_', '\_')
        with open(output_filename, 'a') as out:
            out.write(f'\\begin{{table}}[h!]\n')
            out.write(f'\\begin{{center}}\n')
            out.write(f'\\caption{{AUC Performance table for \\textbf{{\\textit{{{network}}}}}.}}\n')
            out.write(f'\\label{{tab:table1}}\n')
            out.write(f'\\begin{{tabular}}{{l|c|c|c|c|c|c|c}}\n')
            out.write(f'& \\textbf{{100}} & \\textbf{{500}} & \\textbf{{1000}} & \\textbf{{3000}} & \\textbf{{5000}} & \\textbf{{7000}} & \\textbf{{9523}}\\\\\n')
            out.write(f'\\hline\n')
            out.write(f'\\hline\n')
            out.write(f'\\noalign{{\\vskip 3pt}}\n')

        for_std_devs = {}
        for scale_factor in scale_factors:
            scale_factor_vals = []
            with open(output_filename, 'a') as out:
                out.write(f'{scale_factor}x ')
            vals = []
            for sample_size in sample_sizes:
                values = get_test_results_for_label_network_scale_factor_and_sample_size(
                    args.path_to_csv,
                    metric,
                    label,
                    network,
                    scale_factor,
                    sample_size
                )
                after = values['after']
                if after is not None:
                    vals.append(after)

                avg = round(sum(vals) / len(vals), 2)
                scale_factor_vals.append(avg)

                with open(output_filename, 'a') as out:
                    out.write(f'& {avg} ')

            with open(output_filename, 'a') as out:
                out.write(f'\\\\\n')

            for_std_devs[scale_factor] = scale_factor_vals

        with open(output_filename, 'a') as out:
            out.write(f'\\noalign{{\\vskip 3pt}}\n')
            out.write(f'\\hline\n')
            out.write(f'\\noalign{{\\vskip 3pt}}\n')

        with open(output_filename, 'a') as out:
            out.write(f'stddev')
            length = len(for_std_devs[list(for_std_devs.keys())[0]])
            for i in range(length):
                vals = []
                for j in range(len(list(for_std_devs.keys()))):
                    key = list(for_std_devs.keys())[j]
                    vals.append(for_std_devs[key][i])

                out.write(f'& {round(np.std(vals), 2)}')
            out.write('\\\\')

        with open(output_filename, 'a') as out:
            out.write(f'\\end{{tabular}}\n')
            out.write(f'\\end{{center}}\n')
            out.write(f'\\end{{table}}\n')
            out.write('\n')
            out.write('\n')


if __name__ == '__main__':
    main()
